{{- if .Values.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-aurora-backup
  labels:
    {{- include "postgres-aurora-backup.labels" $ | nindent 4 }}
    tags.datadoghq.com/env: {{ $.Values.datadog.env }}
    tags.datadoghq.com/service: {{ $.Values.datadog.service }}
spec:
  {{- include "postgresql-backup.cronScheduler" $ | nindent 2 }}
  jobTemplate:
    spec:
      template:
        metadata:
          {{- with $.Values.podAnnotations }}
          annotations:
            {{- toYaml $ | nindent 8 }}
          {{- end }}
          labels:
            app.kubernetes.io/instance: {{ $.Release.Name }}
            app.kubernetes.io/name: postgres-aurora-backup
            tags.datadoghq.com/env: {{ $.Values.datadog.env }}
            tags.datadoghq.com/service: "postgres-aurora-backup"
        spec:
          serviceAccountName: default
          imagePullSecrets:
            {{- toYaml .Values.imagePullSecrets | nindent 10}}
          containers:
            - name: run-backup
              image: "{{ .Values.image.id }}"
              command: ["/bin/bash", "/scripts/backup-postgres.sh"]
              env:
              - name: PGUSER
                valueFrom:
                  secretKeyRef:
                    name: aurora-postgres-credential
                    key: username
              - name: PGHOST
                valueFrom:
                  secretKeyRef:
                    name: aurora-postgres-credential
                    key: host
              - name: PGPORT
                valueFrom:
                  secretKeyRef:
                    name: aurora-postgres-credential
                    key: port
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: aurora-postgres-credential
                    key: password
              - name: CLUSTER_NAME
                value: "{{.Values.clusterName}}"
              - name: POSTGRES_NAMESPACE
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.namespace
              - name: S3_BUCKET
                valueFrom:
                  secretKeyRef:
                    name: database-backup-credentials
                    key: S3_BUCKET
              - name: AWS_REGION
                valueFrom:
                  secretKeyRef:
                    name: database-backup-credentials
                    key: AWS_REGION
              - name: AWS_ACCESS_KEY_ID
                valueFrom:
                  secretKeyRef:
                    name: database-backup-credentials
                    key: AWS_ACCESS_KEY_ID
              - name: AWS_SECRET_ACCESS_KEY
                valueFrom:
                  secretKeyRef:
                    name: database-backup-credentials
                    key: AWS_SECRET_ACCESS_KEY
               # Mount the persistent volume to /tmp
              volumeMounts:
                - name: tmp-volume
                  mountPath: /tmp
          # Define the volumes, including the persistent volume claim
          volumes:
            - name: tmp-volume
              persistentVolumeClaim:
                claimName: postgres-aurora-backup-pvc      
          restartPolicy: OnFailure
          terminationGracePeriodSeconds: 0
 # Define the PersistentVolumeClaim (PVC)
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-aurora-backup-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "{{ .Values.postgres.pvc.size }}"  # Adjust the size as needed
{{- end }}